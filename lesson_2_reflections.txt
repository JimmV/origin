What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates the repository.  There is not one until this is done.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area temporarily holds files so each commit can be planned thoughtfully.
	This allows for more meaningful commits.

How can you use the staging area to make sure you have one commit per logical change?

	By comparing the working directory with the staging area and the staging area with the 
	repository prior to committing.
	
What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

	When trying out a change that might not make it into the final version, or when two
	versions might be a possibility.
	Branches would allow each version to progress on their own without interfering with
	the progress of the other branch.
	
How do the diagrams help you visualize the branch structure?

	They make it clear which commits can "see" others by looking "upstream" or "downstream".

What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?
	
	merging two branches creates one branch that encompasses all the changes made by both
	branches.  In the diagram it is clear that both branches, as well as all of their 
	commits	are accessible through the new commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Git can usually merge two commits automatically which can save time, however, when
	conflicts arise between two merging files, intervention may be necessary.